generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/*
  Nó sẽ đồng bộ DB, không có khai báo trong này sẽ bị xóa
  npm install dotenv-cli --save-dev
  Chạy lệnh này để gen lại database
  npx dotenv -e .env.local -- npx prisma db push
*/

// Model quản lý thông tin người dùng
model User {
  id           String          @id @default(cuid())
  username     String          @unique
  password     String
  email        String          @unique
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  roleId       String
  walletId     String?
  userLevelId  String
  firstName    String
  lastName     String
  phone        String
  address      String
  groups       GroupMembership[]
  cart         Cart?
  bids         AuctionBid[]
  role         Role            @relation(fields: [roleId], references: [id])
  wallet       Wallet?         @relation(fields: [walletId])
  userLevel    UserLevel       @relation(fields: [userLevelId], references: [id])
  reviews      Review[]
  whitelistProducts WhitelistProduct[]
}

// Model quản lý vai trò người dùng
model Role {
  id        String @id @default(cuid())
  name      String
  users     User[]
  groupRoles GroupRole[]
}

// Model quản lý các cấp độ người dùng
model UserLevel {
  id        String @id @default(cuid())
  name      String
  minPoints Int
  users     User[]
}

// Model quản lý ví tiền của người dùng
model Wallet {
  id        String  @id @default(cuid())
  userId    String  @unique
  balance   Float   @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User    @relation(fields: [userId], references: [id])
}

// Model quản lý sản phẩm
model Product {
  id                  String   @id @default(cuid())
  slug                String   @unique
  name                String
  price               Float
  shortDescription    String
  detailedDescription String
  quantity            Int
  brand               String
  originalPrice       Float
  imageSrc            String
  sold                Int
  notes               String
  categoryId          String
  category            Category @relation(fields: [categoryId], references: [id])
  sales               SaleProduct[]
  cartItems           CartItem[]
  auctions            Auction[]
  reviews             Review[]
  whitelistProducts   WhitelistProduct[]
}

// Model quản lý danh mục sản phẩm
model Category {
  id       String    @id @default(cuid())
  name     String
  products Product[]
}

// Model quản lý mã giảm giá
model Discount {
  code     String @id
  discount Int
  used     Int
  maxCount Int
  sales    Sale[]
}

// Model quản lý chiến dịch khuyến mãi
model Sale {
  id                  String   @id @default(cuid())
  name                String
  discountId          String
  soldDuringPromotion Int
  totalSale           Int
  revenue             Float
  discount            Discount @relation(fields: [discountId], references: [code])
  promotionalSchedules PromotionalSchedule[]
  products            SaleProduct[]
}

// Bảng trung gian quản lý nhiều sản phẩm trong nhiều chiến dịch khuyến mãi
model SaleProduct {
  id        String   @id @default(cuid())
  saleId    String
  productId String
  sale      Sale     @relation(fields: [saleId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

// Model quản lý nhóm mua hàng
model GroupBuy {
  id          String            @id @default(cuid())
  name        String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  memberships GroupMembership[]
  roles       GroupRole[]
  cart        Cart?
}

// Model quản lý thành viên trong nhóm mua hàng
model GroupMembership {
  id        String   @id @default(cuid())
  groupId   String
  userId    String
  joinedAt  DateTime @default(now())
  group     GroupBuy @relation(fields: [groupId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

// Model quản lý vai trò trong nhóm mua hàng
model GroupRole {
  id       String   @id @default(cuid())
  groupId  String
  roleId   String
  group    GroupBuy @relation(fields: [groupId], references: [id])
  role     Role     @relation(fields: [roleId], references: [id])
}

// Model quản lý giỏ hàng
model Cart {
  id        String    @id @default(cuid())
  userId    String?
  groupId   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  items     CartItem[]
  user      User?     @relation(fields: [userId], references: [id])
  group     GroupBuy? @relation(fields: [groupId], references: [id])
}

// Model quản lý sản phẩm trong giỏ hàng
model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

// Model quản lý phiên đấu giá
model Auction {
  id               String       @id @default(cuid())
  productId        String
  startingPrice    Float
  startDate        DateTime
  endDate          DateTime
  highestBidderId  String?
  highestBid       Float?
  isActive         Boolean      @default(true)
  product          Product      @relation(fields: [productId], references: [id])
  bids             AuctionBid[]
}

// Model quản lý lượt đấu giá trong phiên đấu giá
model AuctionBid {
  id        String   @id @default(cuid())
  auctionId String
  userId    String
  bidAmount Float
  createdAt DateTime @default(now())
  auction   Auction  @relation(fields: [auctionId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

// Model quản lý lịch trình khuyến mãi
model PromotionalSchedule {
  id        String   @id @default(cuid())
  startDate DateTime
  endDate   DateTime
  sales     Sale[]
}

// Model quản lý đánh giá của khách hàng
model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  content   String
  rating    Int
  imageUrl  String?
  createdAt DateTime @default(now())
}

// Model quản lý sản phẩm trong whitelist của khách hàng
model WhitelistProduct {
  id        String   @id @default(cuid())
  userId    String
  productId String
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  addedAt   DateTime @default(now())
}